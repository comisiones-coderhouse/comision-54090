Links de interes : 


- tailwind : https://tailwindcss.com/docs
- tailwind en vite : https://tailwindcss.com/docs/guides/vite
- Auto completador de clases de Tailwind : https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss

- ant design : https://ant.design

- lucide-react (iconos) : https://lucide.dev




- Componentes Tailwind 1 : https://mambaui.com/components
- Componentes Tailwind 2 : https://tailblocks.cc/
- Componentes Tailwind 3 (para AI) : https://www.langui.dev/components
- Componentes Tailwind 4 : https://kitwind.io/products/kometa/components
- Componentes Tailwind 5 : https://merakiui.com/components

- Extension VsCode React 1 : https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets
- Extension VsCode React 2 : https://marketplace.visualstudio.com/items?itemName=rodrigovallades.es7-react-js-snippets
- Extension Tailwind (autocomplete) : https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss


- https://github.com/streamich/react-use


- Listado de APIs : https://github.com/public-apis/public-apis
https://rickandmortyapi.com/documentation
https://developer.marvel.com/docs



Estados : Son variables "reactivas", es decir que si se modifica su valor, react "reacciona" a este cambio y vuelve a dibujarlas en pantalla

Hook : Son funciones que nos permiten incorporar nuevas funcionalidades en un componente

useState : El hook useState nos permite manejar estados de estado en React. Cada vez que se ejectua nos da UNA variable de estado. El hook en si retorna SIEMPRE un array con dos cosas dentro. El primer elemento es el valor de la variable de estado, y el segundo es una función que nos permite cambiar el valor de la variable de estado.


useRef
useEffect
useContext



DESTRUCTURING : 

const arr = [1,2,3]

const uno = arr[0]
const dos = arr[1]
const tres = arr[2]

const [uno,dos,tres] = arr




const obj = { name:"Horacio", age : 34 }

const name = obj.name
const age = obj.age

const {name : name , age : age} = obj
const {name, age} = obj



OBJECT PROPERTY SHORTHAND :

const nombre = "horacio"

const persona = { nombre }





Promesas y Maps 


const nombres = ["horacio","juan","pedro"]


const unValor = nombres.forEach((item,i)=>{

})


nombres.map((item,i)=>{

})

/* const nombres = [
    {
        name : "Pedro",
        salary : 1000
    },
    {
        name : "Juan",
        salary : 2000
    },
    {
        name : "Maria",
        salary : 3000
    }
]


const unValor = nombres.forEach((item,i)=>{
    console.log(item,i)
})

const otroValor = nombres.map((item,i)=>{
    //console.log(item,i)
    return {
        name : item.name,
        salary : item.salary + 100
    }
})

console.log(unValor)
console.log(otroValor)
 */



const obj = {
    then : () => {},
    catch : () => {},
    finally : () => {}
}



const respuesta = caches.open() //=> Promise
const respuesta = fetch("/users") //=> Promise

caches.open()
.then()
.catch()
.finally()

fetch("/users")
.then()
.catch()
.finally()




hagan un Mock Async en un efecto a 2 segundos


const miPromesa = new Promise((res, rej) => { 
    console.log("Pidiendo...")
    setTimeout(()=>{
        res()
    },5000)
})

miPromesa.then(() => { console.log("Bien") })

miPromesa.catch(() => { console.log("Mal") })

miPromesa.finally(() => { console.log("Finalizo") })




API : Interfaz de programación de aplicaciones (API)




1) Containers y Presentacionales

Los containers : Son componentes que tienen un estado interno y una UI intermedia. Es decir que no tienen un DOM propio y manejan algun tipo de informacion conseguida y tienen logicas mas fueres, como metodos internos, eventos internos, condicionales de validaciones ,etc. Siempre un componente de este tipo va a pasar su informacion hacia un presentacional

Los presentacionales : Son componentes por lo general no suelen tener logica, es decir que podrian no tener estado interno, ni metodos, sino mas bien toda la informacion que necesitan viene de un componente padre (container). Estos componentes por lo general van a recibir props y los van a querer mostrar en pantalla. Estos componentes suelen trabajar el DOM. 

2) Hooks y patrones de diseño (HoC)
3) Destructuring , REST/SPREAD/ , Operador Ternario


MANUAL DE PROMESAS : 
1) Si tengo una promesa y NO ESTA dentro de un .then()
 entonces le pongo uno (.then) a coninuacion
2) Si tengo una promesa y ESTA dentro de un .then()
  entonces NO le pongo otro (.then) a coninuacion sino que la retorno y continuo abajo del ULTIOMO the. que aparezca




fetch(url string , config object)
.then((respuesta)=>{
    respuesta.json()
})
.catch((error)=>{})





fetch("miapi.com/users")
.then((respuesta)=>{
    return respuesta.json()
})
.then((usuarios)=>{
    const userId = usuarios[50].id
    return fetch("miapi.com/posts")
})
.then((respuesta)=>{
    return respuesta.json()
})
.then((posteos)=>{
    const postId = posteos[50].id
    return fetch("miapi.com/comments")
})
.then((respuesta)=>{
    return respuesta.json()
})
.then((comentarios)=>{
    
})
.catch(()=>{})








fetch("miapi.com",{
    method : "POST",
})
.then((respuesta)=>{
    respuesta.json()
})






function Counter(){
    const [count, setCount] = useState(0)

    const increment = () => setCount(count + 1)

    const decrement = () => setCount(count - 1)

    const reset = () => setCount(0)

    return (
        <div>
            ....
        </div>
    )
}



<section className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 users">
                <UserCardContainer/>
            </section> 





            /*
Eventos

const btn = document.getElementById("btn")

function handleClick(evt) {
    console.log("click")
    console.log(evt)
    evt.target
    evt.preventDefault()
    evt.stopPropagation()
}

btn.addEventListener("click", () => console.log("click"))
btn.addEventListener("click", function (){ console.log("click") })
btn.addEventListener("click", handleClick)
btn.addEventListener("click", handleClick())

*/



function Home() {

    const handleClick = (e) => {
        /* e.preventDefault() */
        /* console.log(e.target.tagName) */
        /* console.log(e)
        console.log("click") */
    }

    const handleChange = (e) => {
        /* console.log(e)
        console.log("change") */
    }

    const handleMouseEnter = (e) => {
        /* console.log(e)
        console.log("mouse enter") */
    }

    const handleKeyDown = (e) => {
        /* console.log(e) */
        /* console.log(e.key) */
        if(e.key == "a"){
            e.preventDefault()
        }
        /* console.log("key down") */
    }

    const handleSubmit = (e) => {
        e.preventDefault()
        /* console.log(e)
        console.log("submit") */
    }

    const handleDivClick = (e) => {
        console.log(e.target)
    }

    return (
        <div onClick={handleDivClick}>
            <h2>Home</h2>
            <div onMouseEnter={handleMouseEnter}>
                <button onClick={(e) => console.log(e)}>click 1</button>
                <button onClick={function (e) { console.log(e) }}>click 2</button>
                <button onClick={handleClick}>click 3</button>
                {/* <button onClick={handleClick()}>click 3</button> */}
            </div>
            <form onSubmit={handleSubmit}>

                <input onChange={handleChange} type="text" placeholder="Nombre" className="text-black" />
                
                <input onKeyDown={handleKeyDown} type="text" placeholder="Edad" className="text-black" />

                <button>enviar</button>

            </form>

            <a href="https://www.google.com" onClick={handleClick}>ir a google</a>
        </div>
    )
}

export default Home








import { useEffect, useState } from "react"

function Home() {

    const [value, setValue] = useState("")

    const handleChange = (e) => {
        //console.log("change")
        //si la longitud de caracteres del valor del input es menor a 5 que se vea un mensaje de error en pantalla
        //const input = document.querySelector("input")
        const input = e.target
        const valor = input.value
        setValue(valor)
    }

    return (
        <div>
            <input type="text" onChange={handleChange} className="text-black" placeholder="Nombre" />
            {/* {if(value.length < 5){<p>El nombre debe ser mayor a 5 caracteres</p>}} */}
            {/* {value.length < 5 ? <p>El nombre debe ser mayor a 5 caracteres</p> : null} */}
            {value.length < 5 && <p>El nombre debe ser mayor a 5 caracteres</p>}
        </div>
    )
}

export default Home





import { useState } from "react"
import Contador from "../Contador"

const Home = () => {

    const [confirmado, setConfirmado] = useState(false)
    const [cant, setCant] = useState(0)

    const onConfirm = (cantidadConfirmada) => {
        console.log("Soy on confirm")
        console.log(cantidadConfirmada)
        setCant(cantidadConfirmada)
        setConfirmado(true)
    }

    return (
        <>
            { confirmado ? <input/> : <Contador onConfirm={onConfirm}/>}
        </>
    )
}

export default Home








State Uplifting : "Es el concepto opuesto a un prop"

ComponentePadre -> props -> ComponenteHijo
ComponentePadre <- props <- ComponenteHijo

Para que un componente hijo que tiene informacion (estado, algo que consiguio de una api, de un evento, etc...) se la pase al componente padre : 

1) en el padre crear un metodo
2) pasarselo como prop al hijo
3) recibirlo en el componente hijo 
4) usar el prop con un evento
5) Le mando como parametro a este prop la info que consegui
6) Opcional : Una vez que recibo esos valores en el componente padre, los almaceno


src/
   |_components/
        |_layout/
            |_App.jsx
            |_Header.jsx
            |_Footer.jsx
            |_NavBar.jsx
            |_Main.jsx
        |_pages/
            |_ProductListContainer.jsx
            |_ProductDetailContainer.jsx
            |_Cart.jsx
        |_widgets/
            |_Button.jsx
            |_Input.jsx
            |_CartWidget.jsx
            |_Popup.jsx
            |_ProductList.jsx
            |_Product.jsx
            |_ProductDetail.jsx
    |_main.jsx
    |_index.html
    |_index.css




PASO A PASO : IMPLEMENTAR CONTEXT y PROVIDER EN UNA APP

1) Creo el contexto, lo pongo en una variable
2) Le saco el Provider al contexto que cree, lo pongo en una variable
3) Me creo un componente aparte, por lo general se va a llamar AlgoProvider
4) Meto el Provider del paso 2 dentro del componente que cree en paso 3
5) Integro mi componente del paso 3 con el resto de la applicacion usando los props children
    console.log(props)
6) Configuro el prop value del Provider del contexto con un valor. Este valor va a ser el valor del contexto. 
7) Asocio algun valor en el contexto con un estado
8) Ya podria acceder al valor del contexto desde cualquier componente hijo : 
9) Importo el hook useContext
10) Importo el contexto que cree en paso 1
11) Uso el contexto como parametro del hook. Esto me da de retorno el valor del contexto. 



Firebase : Plataforma de google que nos da distintos servicios para desarrollo web como bases de datos, almacenamiento, autenticacion, etc

https://firebase.google.com/



CRUD / ABM

CURD : Create, Read, Update, Delete
ABML : Alta, Baja, Modificacion, Listado
Firestore : getDocs/getDoc , addDoc , updateDoc , deleteDoc

import { 
    getFirestore, 
    collection, 
    getDocs, 
    addDoc, 
    doc, 
    updateDoc,
    query,
    where
 } from "firebase/firestore"